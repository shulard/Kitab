[
{"id":"0","name":"Kitab\\Bin\\Bin","normalizedName":"Kitab Bin Bin","description":"","url":".\/kitab\/bin\/Bin.html"},
{"id":"1","name":"Kitab\\Bin\\Compile","normalizedName":"Kitab Bin Compile","description":"","url":".\/kitab\/bin\/Compile.html"},
{"id":"2","name":"Kitab\\Bin\\Test","normalizedName":"Kitab Bin Test","description":"","url":".\/kitab\/bin\/Test.html"},
{"id":"3","name":"Kitab\\Bin\\Welcome","normalizedName":"Kitab Bin Welcome","description":"","url":".\/kitab\/bin\/Welcome.html"},
{"id":"4","name":"Kitab\\Compiler\\Compiler","normalizedName":"Kitab Compiler Compiler","description":"\nA compiler that orchestrates the whole compilation process.\n\nThis compiler, [as explained previously](kitab\/compiler\/index.html), is a\nstream compiler. It receives a finder that is an iterator where each item\nis a PHP file to analyse. Each file is parsed by the parser, transformed\ninto a Intermediate Representation, that is compiled by the target into\npartial objects. The target ends the whole process by assembling all the\nobjects.\n","url":".\/kitab\/compiler\/Compiler.html"},
{"id":"5","name":"Kitab\\Compiler\\IntermediateRepresentation\\Attribute","normalizedName":"Kitab Compiler IntermediateRepresentation Attribute","description":"\nAn attribute intermediate representation.\n\nAn attribute is a property of a class like entity.\n\n# Examples\n\nIn this example, a new attribute `foo` is built, with a protected\nvisibility, and a default value sets to 42.\n\n```php\n$attribute             = new Kitab\\Compiler\\IntermediateRepresentation\\Attribute('foo');\n$attribute->visibility = $attribute::VISIBILITY_PROTECTED;\n$attribute->default    = '42';\n\nassert('protected $foo = 42' === (string) $attribute);\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Attribute.html"},
{"id":"6","name":"Kitab\\Compiler\\IntermediateRepresentation\\Class_","normalizedName":"Kitab Compiler IntermediateRepresentation Class_","description":"\nA class intermediate representation.\n\nA class is one of the major entity in PHP. It exposes constants,\nattributes, and methods, in addition to some properties (like `final`,\n`abstract` etc.). A class can inherit from one other class, and can\nimplement one or more interfaces.\n\n# Examples\n\nIn this example, a new final class `C` is built, with 2\u00a0attributes: `foo`\nand `bar`, and one method: `f`.\n\n```php\n$class               = new Kitab\\Compiler\\IntermediateRepresentation\\Class_('C');\n$class->attributes[] = new Kitab\\Compiler\\IntermediateRepresentation\\Attribute('foo');\n$class->attributes[] = new Kitab\\Compiler\\IntermediateRepresentation\\Attribute('bar');\n$class->methods[]    = new Kitab\\Compiler\\IntermediateRepresentation\\Method('f');\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Class_.html"},
{"id":"7","name":"Kitab\\Compiler\\IntermediateRepresentation\\Constant","normalizedName":"Kitab Compiler IntermediateRepresentation Constant","description":"\nA constant intermediate representation.\n\nA constant is a property of a class entity.\n\n# Examples\n\nIn this example, a new constant `FOO` is built, with a protected\nvisibility, and a value sets to 42.\n\n```php\n$constant             = new Kitab\\Compiler\\IntermediateRepresentation\\Constant('FOO');\n$constant->visibility = $constant::VISIBILITY_PROTECTED;\n$constant->value      = '42';\n\nassert('protected const FOO = 42' === (string) $constant);\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Constant.html"},
{"id":"8","name":"Kitab\\Compiler\\IntermediateRepresentation\\Documentation","normalizedName":"Kitab Compiler IntermediateRepresentation Documentation","description":"\nA documentation intermediate representation.\n\n\nA documentation is block comment starting with `\/**` and \u201cattached\u201d to a\nstatement (like a function, a method, a class, an attribute\netc.). \u201cAttached\u201d means that it immediately preceeds a statement, modulo\nwhitespaces.\n\nKitab expects those documentation to contain\n[CommonMark](http:\/\/commonmark.org\/) formatted text.\n\nThe first paragraph of the documentation is called the\ndescription. Paragraphes must be separated by 2\u00a0consecutive newlines.\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Documentation.html"},
{"id":"9","name":"Kitab\\Compiler\\IntermediateRepresentation\\Entity","normalizedName":"Kitab Compiler IntermediateRepresentation Entity","description":"\nAn entity intermediate representation.\n\nThis is an abstract class aiming at representing all kind of entity, like\nclass, interface, trait, function\u2026\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Entity.html"},
{"id":"10","name":"Kitab\\Compiler\\IntermediateRepresentation\\File","normalizedName":"Kitab Compiler IntermediateRepresentation File","description":"\nA file intermediate representation.\n\nA file is one root containing all the other intermediate\nrepresentations. By design, it extends the `ArrayObject` class, thus this\nis a collection of objects.\n\n# Examples\n\nThis example shows how to create a file and to add intermediate\nrepresentations in it, here a class.\n\n```php\n$file   = new Kitab\\Compiler\\IntermediateRepresentation\\File('example.php');\n$file[] = new Kitab\\Compiler\\IntermediateRepresentation\\Class_('C');\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/File.html"},
{"id":"11","name":"Kitab\\Compiler\\IntermediateRepresentation\\Function_","normalizedName":"Kitab Compiler IntermediateRepresentation Function_","description":"\nA named function intermediate representation.\n\nA named function is one of the major entity in PHP. It has zero or many\ninputs, and zero or one output. Each input is represented by a\n`Kitab\\Compiler\\IntermediateRepresentation\\Parameter` instance, while the\noutput is represented by a `Kitab\\Compiler\\IntermediateRepresentation\\Type`\ninstance.\n\n# Examples\n\nIn this example, a new function `f` is created with 1\u00a0input: `int $x`, and\n1\u00a0output: `int`.\n\n```php\n$typeInt = new Kitab\\Compiler\\IntermediateRepresentation\\Type();\n$typeInt->name = 'int';\n\n$input1 = new Kitab\\Compiler\\IntermediateRepresentation\\Parameter('x');\n$input1->type = $typeInt;\n\n$output = $typeInt;\n\n$function = new Kitab\\Compiler\\IntermediateRepresentation\\Function_('f');\n$function->inputs[] = $input1;\n$function->output   = $output;\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Function_.html"},
{"id":"12","name":"Kitab\\Compiler\\IntermediateRepresentation\\HasMethods","normalizedName":"Kitab Compiler IntermediateRepresentation HasMethods","description":"\nAn interface to represent an entity with methods.\n","url":".\/kitab\/compiler\/intermediaterepresentation\/HasMethods.html"},
{"id":"13","name":"Kitab\\Compiler\\IntermediateRepresentation\\Interface_","normalizedName":"Kitab Compiler IntermediateRepresentation Interface_","description":"\nAn interface intermediate representation.\n\nAn interface is one of the major entity in PHP. It exposes methods. An\ninterface can inherit from other interfaces.\n\n# Examples\n\nIn this example, a new interface `I` is built, with 1\u00a0method: `f`.\n\n```php\n$interface            = new Kitab\\Compiler\\IntermediateRepresentation\\Interface_('I');\n$interface->methods[] = new Kitab\\Compiler\\IntermediateRepresentation\\Method('f');\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Interface_.html"},
{"id":"14","name":"Kitab\\Compiler\\IntermediateRepresentation\\Into","normalizedName":"Kitab Compiler IntermediateRepresentation Into","description":"\nA visitor to transform an Abstract Syntax Tree (AST) into an Intermediate\nRepresentation (IR).\n\nThis visitor implements the API from `PhpParser\\NodeVisitorAbstract`. It is\napplied when leaving a node of the AST to allow other visitors to transform\nthe currently visited node and its children. For instance, the name\nresolver visitor modifies the AST when entering a node. This visitor needs\nthe information from the name resolver visitor, so it must executes\nafter. The best way to get all these information for a node and its\nchildren is to run each node when the visitor leaves a node.\n\n# Examples\n\nSee [the examples of the current\nnamespace](kitab\/compiler\/intermediaterepresentation\/index.html).\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Into.html"},
{"id":"15","name":"Kitab\\Compiler\\IntermediateRepresentation\\Method","normalizedName":"Kitab Compiler IntermediateRepresentation Method","description":"\nA method intermediate representation.\n\nA method is a function inside a class. Contrary to a function, it receives\nan implicit `$this` argument representing the object (class instance),\nexcept for static method. Just like a function, it has zero or many inputs,\nand zero or one output. Each input is represented by a\n`Kitab\\Compiler\\IntermediateRepresentation\\Parameter` instance, while the\noutput is represented by a `Kitab\\Compiler\\IntermediateRepresentation\\Type`\ninstance. A method also has a visiblity, can be abstract (if the class is\nabstract), and can be final (cannot be overriden by a child class).\n\n# Examples\n\nIn this example, a new method `f` is created with 1\u00a0input: `int $x`, and\n1\u00a0output: `int`.\n\n```php\n$typeInt = new Kitab\\Compiler\\IntermediateRepresentation\\Type();\n$typeInt->name = 'int';\n\n$input1 = new Kitab\\Compiler\\IntermediateRepresentation\\Parameter('x');\n$input1->type = $typeInt;\n\n$output = $typeInt;\n\n$method = new Kitab\\Compiler\\IntermediateRepresentation\\Method('f');\n$method->inputs[] = $input1;\n$method->output   = $output;\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Method.html"},
{"id":"16","name":"Kitab\\Compiler\\IntermediateRepresentation\\Parameter","normalizedName":"Kitab Compiler IntermediateRepresentation Parameter","description":"\nA parameter intermediate representation.\n\n\nA parameter of a function (or method) receives an argument. It takes the\nform of a variable with a type and a default value. A parameter can be\nvariadic if it is in the last position of the list of parameters: It means\nit will receive all extra arguments given to the function.\n\n# Examples\n\nThe following example represent the parameter `int $foo = 42`:\n\n```php\n$typeInt       = new Kitab\\Compiler\\IntermediateRepresentation\\Type();\n$typeInt->name = 'int';\n\n$parameter        = new Kitab\\Compiler\\IntermediateRepresentation\\Parameter('x');\n$parameter->type  = $typeInt;\n$parameter->name  = 'foo';\n$parameter->value = '42';\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Parameter.html"},
{"id":"17","name":"Kitab\\Compiler\\IntermediateRepresentation\\Trait_","normalizedName":"Kitab Compiler IntermediateRepresentation Trait_","description":"\nA trait intermediate representation.\n\nA trait is one of the major entity in PHP. It exposes attributes, and\nmethods. A trait can inherit from one other trait.\n\n# Examples\n\nIn this example, a new trait `T` is built, with 2\u00a0attributes: `foo`\nand `bar`, and one method: `f`.\n\n```php\n$trait               = new Kitab\\Compiler\\IntermediateRepresentation\\Trait_('T');\n$trait->attributes[] = new Kitab\\Compiler\\IntermediateRepresentation\\Attribute('foo');\n$trait->attributes[] = new Kitab\\Compiler\\IntermediateRepresentation\\Attribute('bar');\n$trait->methods[]    = new Kitab\\Compiler\\IntermediateRepresentation\\Method('f');\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Trait_.html"},
{"id":"18","name":"Kitab\\Compiler\\IntermediateRepresentation\\Type","normalizedName":"Kitab Compiler IntermediateRepresentation Type","description":"\nA type intermediate representation.\n\nA type has a name. It can represent a value passed by copy or by\nreference. It can be nullable, i.e. null value can be considered as valid.\n\nBecause values in PHP are represented by union types (many types), the type\nof a value can be undeclared (and decided at runtime). Thus, a type can\nhave no name in this intermediate representation.\n\n# Examples\n\nThe following example builds a nullable reference type `T`.\n\n```php\n$type = new Kitab\\Compiler\\IntermediateRepresentation\\Type();\n$type->name      = 'T';\n$type->reference = true;\n$type->nullable  = true;\n\nassert('?T &' === (string) $type);\n```\n","url":".\/kitab\/compiler\/intermediaterepresentation\/Type.html"},
{"id":"19","name":"Kitab\\Compiler\\Parser","normalizedName":"Kitab Compiler Parser","description":"\nA parser producing an Intermediate Representation.\n\nThis parser takes one file, parses it, generates an Abstract Syntax Tree,\nand transforms it into an Intermediate Representation.\n\nThe PHP\u00a07 form is prefered over PHP\u00a05 and lower forms, it means it will try\nto parse with PHP\u00a07 strategy first. They are small but subtle [differences\nwith previous PHP\nversions](http:\/\/php.net\/manual\/en\/migration70.incompatible.php#migration70.incompatible.variable-handling).\n\nAll the work done by the parser is delegated to\n[PHP-Parser](https:\/\/github.com\/nikic\/PHP-Parser).\n","url":".\/kitab\/compiler\/Parser.html"},
{"id":"20","name":"Kitab\\Compiler\\Target\\DocTest\\DocTest","normalizedName":"Kitab Compiler Target DocTest DocTest","description":"","url":".\/kitab\/compiler\/target\/doctest\/DocTest.html"},
{"id":"21","name":"Kitab\\Compiler\\Target\\Html\\Html","normalizedName":"Kitab Compiler Target Html Html","description":"","url":".\/kitab\/compiler\/target\/html\/Html.html"},
{"id":"22","name":"Kitab\\Compiler\\Target\\Html\\Markdown\\Markdown","normalizedName":"Kitab Compiler Target Html Markdown Markdown","description":"","url":".\/kitab\/compiler\/target\/html\/markdown\/Markdown.html"},
{"id":"23","name":"Kitab\\Compiler\\Target\\Html\\Markdown\\Renderer\\Code","normalizedName":"Kitab Compiler Target Html Markdown Renderer Code","description":"","url":".\/kitab\/compiler\/target\/html\/markdown\/renderer\/Code.html"},
{"id":"24","name":"Kitab\\Compiler\\Target\\Html\\Router","normalizedName":"Kitab Compiler Target Html Router","description":"","url":".\/kitab\/compiler\/target\/html\/Router.html"},
{"id":"25","name":"Kitab\\Compiler\\Target\\Html\\Search","normalizedName":"Kitab Compiler Target Html Search","description":"","url":".\/kitab\/compiler\/target\/html\/Search.html"},
{"id":"26","name":"Kitab\\Compiler\\Target\\Html\\Templater","normalizedName":"Kitab Compiler Target Html Templater","description":"","url":".\/kitab\/compiler\/target\/html\/Templater.html"},
{"id":"27","name":"Kitab\\Compiler\\Target\\Target","normalizedName":"Kitab Compiler Target Target","description":"\nDefine a compilation target.\n\nA compilation target works in two steps:\n\n1. `compile` to compile an intermediate representation of a file into the target,\n2. `assemble` to assemble of the compiled files.\n","url":".\/kitab\/compiler\/target\/Target.html"},
{"id":"28","name":"Kitab\\Compiler\\Target\\Templater","normalizedName":"Kitab Compiler Target Templater","description":"","url":".\/kitab\/compiler\/target\/Templater.html"},
{"id":"29","name":"Kitab\\Configuration","normalizedName":"Kitab Configuration","description":"\nConfiguration structure for the Kitab project.\n\nThis structure contains all the configuration items used by Kitab.\nAll these items are public. Use it as a regular structure.\n\n# Examples\n\n```php\n$configuration              = new Kitab\\Configuration();\n$configuration->projectName = 'Kitab';\n\nassert('Kitab' === $configuration->projectName);\n```\n","url":".\/kitab\/Configuration.html"},
{"id":"30","name":"Kitab\\DocTest\\Asserter\\Assert","normalizedName":"Kitab DocTest Asserter Assert","description":"\nThe `assert` asserter. It helps to test a piece of code using the `assert`\nintrinsic.\n","url":".\/kitab\/doctest\/asserter\/Assert.html"},
{"id":"31","name":"Kitab\\DocTest\\Report\\Cli\\Cli","normalizedName":"Kitab DocTest Report Cli Cli","description":"","url":".\/kitab\/doctest\/report\/cli\/Cli.html"},
{"id":"32","name":"Kitab\\DocTest\\Report\\Cli\\Colorizer","normalizedName":"Kitab DocTest Report Cli Colorizer","description":"","url":".\/kitab\/doctest\/report\/cli\/Colorizer.html"},
{"id":"33","name":"Kitab\\DocTest\\Report\\Cli\\Colors","normalizedName":"Kitab DocTest Report Cli Colors","description":"","url":".\/kitab\/doctest\/report\/cli\/Colors.html"},
{"id":"34","name":"Kitab\\DocTest\\Report\\Cli\\Fields\\Duration","normalizedName":"Kitab DocTest Report Cli Fields Duration","description":"","url":".\/kitab\/doctest\/report\/cli\/fields\/Duration.html"},
{"id":"35","name":"Kitab\\DocTest\\Report\\Cli\\Fields\\Failures","normalizedName":"Kitab DocTest Report Cli Fields Failures","description":"","url":".\/kitab\/doctest\/report\/cli\/fields\/Failures.html"},
{"id":"36","name":"Kitab\\DocTest\\Report\\Cli\\Fields\\Memory","normalizedName":"Kitab DocTest Report Cli Fields Memory","description":"","url":".\/kitab\/doctest\/report\/cli\/fields\/Memory.html"},
{"id":"37","name":"Kitab\\DocTest\\Report\\Cli\\Fields\\Nil","normalizedName":"Kitab DocTest Report Cli Fields Nil","description":"","url":".\/kitab\/doctest\/report\/cli\/fields\/Nil.html"},
{"id":"38","name":"Kitab\\DocTest\\Report\\Cli\\Fields\\Result","normalizedName":"Kitab DocTest Report Cli Fields Result","description":"","url":".\/kitab\/doctest\/report\/cli\/fields\/Result.html"},
{"id":"39","name":"Kitab\\DocTest\\Report\\Cli\\Fields\\Uncompleted","normalizedName":"Kitab DocTest Report Cli Fields Uncompleted","description":"","url":".\/kitab\/doctest\/report\/cli\/fields\/Uncompleted.html"},
{"id":"40","name":"Kitab\\DocTest\\Suite","normalizedName":"Kitab DocTest Suite","description":"\nThin layer between atoum and Kitab test suite.\n\nThis layer allows to inject new features specifically designed for Kitab,\nlike the `assert` feature.\n","url":".\/kitab\/doctest\/Suite.html"},
{"id":"41","name":"Kitab\\Exception\\Exception","normalizedName":"Kitab Exception Exception","description":"\nRoot of all application exceptions.\n\nKitab exceptions extend [Hoa\nexceptions](https:\/\/central.hoa-project.net\/Resource\/Library\/Exception),\nwith all the same features.\n","url":".\/kitab\/exception\/Exception.html"},
{"id":"42","name":"Kitab\\Exception\\LinkerUnknownIntermediateRepresentation","normalizedName":"Kitab Exception LinkerUnknownIntermediateRepresentation","description":"\nRuntime exception when the linker is not able to handle an intermediate\nrepresentation.\n\nIt should normally happen _only_ when a developer is hacking Kitab, not when\na user is using it.\n","url":".\/kitab\/exception\/LinkerUnknownIntermediateRepresentation.html"},
{"id":"43","name":"Kitab\\Exception\\PhpParserError","normalizedName":"Kitab Exception PhpParserError","description":"\nRuntime exception when Kitab parses a PHP file containing invalid PHP code\n(with a syntax error).\n\nThis exception contains [the `Error` exception from the\nPHP-Parser](https:\/\/github.com\/nikic\/PHP-Parser\/blob\/master\/lib\/PhpParser\/Error.php)\nproject as the previous exception. This `Error` exception holds all the\ninformation about the syntax error.\n","url":".\/kitab\/exception\/PhpParserError.html"},
{"id":"44","name":"Kitab\\Exception\\TargetUnknownIntermediateRepresentation","normalizedName":"Kitab Exception TargetUnknownIntermediateRepresentation","description":"\nRuntime exception when the target is not able to handle an intermediate\nrepresentation.\n\nIt should normally happen _only_ when a developer is hacking Kitab, not when\na user is using it.\n","url":".\/kitab\/exception\/TargetUnknownIntermediateRepresentation.html"},
{"id":"45","name":"Kitab\\Finder","normalizedName":"Kitab Finder","description":"\nCustom finder that scans only PHP files.\n","url":".\/kitab\/Finder.html"}
]